--- gamess/rungms	2014-01-15 11:26:44.000000000 -0800
+++ patch-files/rungms	2014-01-15 11:27:58.000000000 -0800
@@ -60,9 +60,15 @@
 #       See also a very old LoadLeveler "ll-gms" for some IBM systems.
 #
 set TARGET=sockets
-set SCR=/scr/$USER
-set USERSCR=~$USER/scr
-set GMSPATH=/u1/mike/gamess
+set USERSCR=$PWD
+if ( ! $?GAMESS_SCR )  then
+ set SCR=$PWD
+else
+ set SCR=$GAMESS_SCR
+endif
+
+#set USERSCR=~$USER/scr
+set GMSPATH=ROLL_PATHGAMESS
 #
 set JOB=$1      # name of the input file xxx.inp, give only the xxx part
 set VERNO=$2    # revision number of the executable created by 'lked' step
@@ -91,10 +97,27 @@
    echo "SGE has assigned the following compute nodes to this run:"
    uniq $TMPDIR/machines
 endif
+@ ipAddress=0
 if ($SCHED == PBS) then
-   set SCR=/scratch/$PBS_JOBID
+   set PBS_HOSTFILE=$PBS_NODEFILE
    echo "PBS has assigned the following compute nodes to this run:"
    uniq $PBS_NODEFILE
+  if (`/sbin/ifconfig|grep -c ib0` != 0 && $TARGET == sockets ) then
+       cat /dev/null > .nodes
+       set hostnames=(`cat $PBS_NODEFILE`)
+       set current_host = "_foo_"
+       foreach host ($hostnames)
+          if ( $current_host != $host) then
+             set address = (`ssh $host /sbin/ifconfig | awk 'BEGIN{foundib=0} { if ( $1 ~ /ib0/ ) { foundib=1; next } } { if (foundib == 1 ) { split($2,array,":");foundib = 0 } } END {print array[2]}'`)
+             set current_host = $host
+           endif
+           echo $address >> .nodes
+       end
+       set PBS_HOSTFILE=$PWD/.nodes
+       echo "The host names have been reassigned for IP over IB:"
+       uniq $PBS_HOSTFILE
+       @ ipAddress=1
+  endif
 endif
 #
 echo "Available scratch disk space (Kbyte units) at beginning of the job is"
@@ -107,8 +130,6 @@
 limit stacksize 8192
 
 #  Grab a copy of the input file.
-#  In the case of examNN jobs, file is in tests/standard subdirectory.
-#  In the case of exam-vbNN jobs, file is in vb2000's tests subdirectory.
 if ($JOB:r.inp == $JOB) set JOB=$JOB:r      # strip off possible .inp
 echo "Copying input file $JOB.inp to your run's scratch directory..."
 if (-e $JOB.inp) then
@@ -116,16 +137,18 @@
    cp  $JOB.inp  $SCR/$JOB.F05
    unset echo
 else
-   if (-e tests/standard/$JOB.inp) then
+#  if (-e tests/standard/$JOB.inp) then
+   if (-e tests/$JOB.inp) then
       set echo
-      cp  tests/standard/$JOB.inp  $SCR/$JOB.F05
+#     cp  tests/standard/$JOB.inp  $SCR/$JOB.F05
+      cp  tests/$JOB.inp  $SCR/$JOB.F05
       unset echo
    else
-      if (-e tests/$JOB.inp) then
-         set echo
-         cp  tests/$JOB.inp  $SCR/$JOB.F05
-         unset echo
-      else
+#     if (-e tests/$JOB.inp) then
+#        set echo
+#        cp  tests/$JOB.inp  $SCR/$JOB.F05
+#        unset echo
+#     else
          echo "Input file $JOB.inp does not exist."
          echo "This job expected the input file to be in directory `pwd`"
          echo "Please fix your file name problem, and resubmit."
@@ -274,44 +297,44 @@
 #          where all CPUs (aka COREs) are inside a -single- NODE.
 #     At other locations, you may wish to consider some of the examples
 #     that follow below, after commenting out this ISU specific part.
-   if ($NCPUS > 1) then
-      switch (`hostname`)
-         case se.msg.chem.iastate.edu:
-         case sb.msg.chem.iastate.edu:
-            if ($NCPUS > 2) set NCPUS=2
-            set NNODES=1
-            set HOSTLIST=(`hostname`:cpus=$NCPUS)
-            breaksw
-         case br.msg.chem.iastate.edu:
-            if ($NCPUS > 4) set NCPUS=4
-            set NNODES=1
-            set HOSTLIST=(`hostname`:cpus=$NCPUS)
-            breaksw
-         case cd.msg.chem.iastate.edu:
-         case zn.msg.chem.iastate.edu:
-         case ni.msg.chem.iastate.edu:
-         case co.msg.chem.iastate.edu:
-         case pb.msg.chem.iastate.edu:
-         case bi.msg.chem.iastate.edu:
-         case po.msg.chem.iastate.edu:
-         case at.msg.chem.iastate.edu:
-         case sc.msg.chem.iastate.edu:
-            if ($NCPUS > 4) set NCPUS=4
-            set NNODES=1
-            set HOSTLIST=(`hostname`:cpus=$NCPUS)
-            breaksw
-         case ga.msg.chem.iastate.edu:
-         case ge.msg.chem.iastate.edu:
-         case gd.msg.chem.iastate.edu:
-            if ($NCPUS > 6) set NCPUS=6
-            set NNODES=1
-            set HOSTLIST=(`hostname`:cpus=$NCPUS)
-            breaksw
-         default:
-            echo I do not know how to run this node in parallel.
-            exit 20
-      endsw
-   endif
+#  if ($NCPUS > 1) then
+#     switch (`hostname`)
+#        case se.msg.chem.iastate.edu:
+#        case sb.msg.chem.iastate.edu:
+#           if ($NCPUS > 2) set NCPUS=2
+#           set NNODES=1
+#           set HOSTLIST=(`hostname`:cpus=$NCPUS)
+#           breaksw
+#        case br.msg.chem.iastate.edu:
+#           if ($NCPUS > 4) set NCPUS=4
+#           set NNODES=1
+#           set HOSTLIST=(`hostname`:cpus=$NCPUS)
+#           breaksw
+#        case cd.msg.chem.iastate.edu:
+#        case zn.msg.chem.iastate.edu:
+#        case ni.msg.chem.iastate.edu:
+#        case co.msg.chem.iastate.edu:
+#        case pb.msg.chem.iastate.edu:
+#        case bi.msg.chem.iastate.edu:
+#        case po.msg.chem.iastate.edu:
+#        case at.msg.chem.iastate.edu:
+#        case sc.msg.chem.iastate.edu:
+#           if ($NCPUS > 4) set NCPUS=4
+#           set NNODES=1
+#           set HOSTLIST=(`hostname`:cpus=$NCPUS)
+#           breaksw
+#        case ga.msg.chem.iastate.edu:
+#        case ge.msg.chem.iastate.edu:
+#        case gd.msg.chem.iastate.edu:
+#           if ($NCPUS > 6) set NCPUS=6
+#           set NNODES=1
+#           set HOSTLIST=(`hostname`:cpus=$NCPUS)
+#           breaksw
+#        default:
+#           echo I do not know how to run this node in parallel.
+#           exit 20
+#     endsw
+#  endif
 #
 #       3. How to run in a single computer, namely the "localhost", so
 #          this computer needn't have a proper Internet name.
@@ -368,7 +391,7 @@
 #         The IBM cluster has two Gigabit adapters in each 4-way SMP,
 #         while the AXP cluster is based on a Myrinet network.
       if (`uname` == AIX)   set NETEXT=".gig,.gig2"
-      if (`uname` == Linux) set NETEXT=".myri"
+#     if (`uname` == Linux) set NETEXT=".myri"
 #
 #         repeated host names in the PBS host file indicate being assigned
 #         CPUs in the same SMP enclosure, which we must count up correctly.
@@ -383,15 +406,20 @@
 #         variable substitution followed by colon gracefully by ${HOST}:cpus.)
 #
       set HOSTLIST=()
-      set nmax=`wc -l $PBS_NODEFILE`
+#     set nmax=`wc -l $PBS_NODEFILE`
+      set nmax=`wc -l $PBS_HOSTFILE`
       set nmax=$nmax[1]
       if ($nmax != $NCPUS) then
          echo There is processor count confusion
          exit
       endif
 #            1st host in the list is sure to be a new SMP enclosure
-      set MYNODE=`sed -n -e "1 p" $PBS_NODEFILE`
-      set MYNODE=`echo $MYNODE | awk '{split($0,a,"."); print a[1]}'`
+#     set MYNODE=`sed -n -e "1 p" $PBS_NODEFILE`
+#     set MYNODE=`echo $MYNODE | awk '{split($0,a,"."); print a[1]}'`
+      set MYNODE=`sed -n -e "1 p" $PBS_HOSTFILE`
+      if ( $ipAddress == 0) then
+          set MYNODE=`echo $MYNODE | awk '{split($0,a,"."); print a[1]}'`
+      endif
 #            IPROC counts assigned processors (up to NCPUS),
 #            NNODES counts number of SMP enclosures.
 #            NSMPCPU counts processors in the current SMP enclosure
@@ -401,10 +429,16 @@
       set spacer1=":cpus="
       set spacer2=":netext="
       while($IPROC <= $nmax)
-         set MYPROC=`sed -n -e "$IPROC p" $PBS_NODEFILE`
-         set MYPROC=`echo $MYPROC | awk '{split($0,a,"."); print a[1]}'`
+#        set MYPROC=`sed -n -e "$IPROC p" $PBS_NODEFILE`
+#        set MYPROC=`echo $MYPROC | awk '{split($0,a,"."); print a[1]}'`
+         set MYPROC=`sed -n -e "$IPROC p" $PBS_HOSTFILE`
+          if ( $ipAddress == 0) then
+             set MYPROC=`echo $MYPROC | awk '{split($0,a,"."); print a[1]}'`
+          endif
+
          if($MYPROC != $MYNODE) then
-            set HOSTLIST = ($HOSTLIST $MYNODE$spacer1$NSMPCPU$spacer2$NETEXT)
+#           set HOSTLIST = ($HOSTLIST $MYNODE$spacer1$NSMPCPU$spacer2$NETEXT)
+            set HOSTLIST = ($HOSTLIST $MYNODE$spacer1$NSMPCPU)
             set MYNODE=$MYPROC
             @ NSMPCPU = 0
             @ NNODES++
@@ -412,13 +446,16 @@
          @ IPROC++
          @ NSMPCPU++
       end
-      set HOSTLIST = ($HOSTLIST $MYNODE$spacer1$NSMPCPU$spacer2$NETEXT)
+#     set HOSTLIST = ($HOSTLIST $MYNODE$spacer1$NSMPCPU$spacer2$NETEXT)
+      set HOSTLIST = ($HOSTLIST $MYNODE$spacer1$NSMPCPU)
    endif
 #
 #        we have now finished setting up a correct HOSTLIST.
 #        uncomment the next two if you are doing script debugging.
 #--echo "The generated host list is"
 #--echo $HOSTLIST
+   echo "The generated host list is"
+   echo $HOSTLIST
 #
 #
 #        choose remote shell execution program.
@@ -516,7 +553,7 @@
    #      we'll pass in a "processers per node" value, that is,
    #      all nodes are presumed to have equal numbers of cores.
    #
-   set PPN=$4
+   set PPN=ROLLPPN
    #
    #      Allow for compute process and data servers (one pair per core)
    #      note that NCPUS = #cores, and NPROCS = #MPI processes
@@ -590,7 +627,8 @@
          set NNODES=$NNODES[1]
       endif
       if ($SCHED == PBS) then
-         uniq $PBS_NODEFILE $HOSTFILE
+#        uniq $PBS_NODEFILE $HOSTFILE
+         uniq $PBS_HOSTFILE $HOSTFILE
          set NNODES=`wc -l $HOSTFILE`
          set NNODES=$NNODES[1]
       endif
